# UI Pipeline
parameters:
  - name: ENVVG
    displayName: Select Environment To Deploy
    type: string
    default: UAT
    values:
    - UAT
    #- PROD

  - name: blackduck
    displayName: Do you want to scan for BlackDuck?(Click on it)
    type: boolean
    default: false

  - name: veracode
    displayName: Do you want to scan for VeraCode?(Click on it)
    type: boolean
    default: false

trigger:
- master

# DEFINE VARIABLES
variables:
- name: build_agent_pool
  value: windows-latest

- name: build_content_path
  value: "$(Build.SourcesDirectory)/build"
- name: vc_zip_file
  value: "$(Build.SourcesDirectory)/DAMs-FE-VC.zip"
  
- name: env
  ${{ if eq(parameters.ENVVG, 'UAT') }}:
    value: uat
  ${{ if eq(parameters.ENVVG, 'PROD') }}:
    value: prod

- name: BACKEND_URL
  value: $(${{ parameters.ENVVG }}_BACKEND_URL)

# - name: SOLR_URL
#   value: $(${{ parmeters.ENVVG}}_SOLR_URL)

- group: dams_platform


stages:
- ${{ if or( eq(parameters.blackduck, false), eq(parameters.veracode, true) ) }}:
  - stage: BUILD
    displayName: 'Build ${{ parameters.ENVVG }}'
    pool: 
      vmImage: $(build_agent_pool)
    jobs:
      - job: Build
        displayName: "Build UI"
        workspace:
          clean: all
        steps:
          - checkout: self

          # Replace Variables & Tokens
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace Tokens in Manifests'
            inputs:
              rootDirectory: '$(Build.SourcesDirectory)'
              targetFiles: '**.env'
              escapeType: none
              verbosity: detailed

          - task: NodeTool@0
            inputs:
              versionSpec: '16.x'
            displayName: 'Install Node.js'

          - script: npm install
            displayName: 'npm install'

          - script: npm run build
            displayName: 'npm build'
            
          - script: cp $(Build.SourcesDirectory)/package-lock.json $(Build.SourcesDirectory)/build && cp $(Build.SourcesDirectory)/package.json $(Build.SourcesDirectory)/build
            displayName: 'Copy package/package-lock.json to build folder'

          - task: ArchiveFiles@2
            displayName: 'Ziping the folder for Veracode'
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)/build'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(vc_zip_file)'
              replaceExistingArchive: true
            condition: eq('${{ parameters.veracode }}', true)
          
          - task: Veracode.veracode-vsts-build-extension.veracode-scanner-task.Veracode@3
            displayName: "Veracode Scan"
            condition: and(succeeded(), eq('${{ parameters.veracode }}', true))
            inputs:
              AnalysisService: 'veracode_service_connection'
              veracodeAppProfile: 'IND-ASR-DAMs_PLATFORM'
              version: 'DAM-FE-$(build.buildNumber)'
              filepath: '$(vc_zip_file)'
              createSandBox: false
              createProfile: false
              failTheBuildIfVeracodeScanDidNotInitiate: false
              scanStatusCheckInterval: '60'
              importResults: false
              failBuildOnPolicyFail: false

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: $(build_content_path)
              artifactName: build_ui_$(env)
            displayName: "Publish pipeline artifact"

- ${{ if and( eq(parameters.blackduck, false), eq(parameters.veracode, false) ) }}:
  - stage: Deploy
    dependsOn: BUILD
    displayName: 'deploy ${{ parameters.ENVVG }}'
    pool: 
      vmImage: $(build_agent_pool)
    jobs:
    - deployment: VM_DAM
      displayName: Deploy to VM
      workspace:
        clean: all
      environment: 
        name: VM_DAM
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:   
            steps:
              
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifact: build_ui_$(env)
                  path: $(System.DefaultWorkingDirectory)/build_ui_$(env)

              - powershell: |
                  Write-Host "Remove Old Content"
                  Remove-Item -path 'C:\nginx\html\*' -Recurse -Force -EA SilentlyContinue -Verbose;
                  
                  Write-Host "Copy UI code to VM Path"
                  Copy-Item '$(System.DefaultWorkingDirectory)/build_ui_$(env)/*' 'C:\nginx\html' -Recurse;
                          

- ${{ if eq(parameters.blackduck, true) }}:
  - stage: BlackDuck
    displayName: 'BlackDuck ${{ parameters.ENVVG }}'
    pool: 
      vmImage: $(build_agent_pool)
    jobs:
      - job: BlackDuck
        displayName: "BlackDuck Scan"
        workspace:
          clean: all
        steps:
          - checkout: self

          - task: synopsys-detect.synopsys-detect.synopsys-detect-task.SynopsysDetectTask@8
            displayName: 'Black Duck - Synopsys Detect for your build '
            inputs:
              BlackDuckService: 'black_duck'
              DetectArguments: |
                --detect.diagnostic=true
                --detect.project.name="IN-CCRA2-Platform"
                --detect.project.version.name="$(bd_version)"
                --detect.project.codelocation.suffix="UI"
                --detect.output.path="C:\Users\VssAdministrator\blackduck"
            #continueOnError: true
